== Instituto Tecnológico de México Campus Nuevo Laredo
*Alumno:* Brandon Vazquez Camarillo. +
*No. Control:* 17100307. +

== Modelo de cajas

image::https://s3-us-west-2.amazonaws.com/devcodepro/media/tutorials/modelo-caja-css-t1.jpg[Modelo de cajas]

//Deje como tal por que ya tenia definido esta parte, o sea, el texto de Modelo de Cajas solo lo adapte a los requerimientos de la tarea, no considere reescribir esto debido a que lo "define" claro, me sirve como nota.

Cada elemento dentro de un documento HTML se encuentra contenido en una caja, la cual cuenta con una serie de propiedades que afectaran el cómo se muestran los elementos. +
Cada caja cuenta con un *Height y Width* (altura - anchura), ademas de poseer un *Padding, Outline, Border y Margin* (relleno - contorno - borde - margen) siendo estos quienes brindan un mayor control sobre los elementos a la hora de organizarlos. +

image::https://uniwebsidad.com/static/libros/imagenes/css/f0403.gif[CSS]

Dentro de sus propiedades, podemos encontrar las siguientes:

- *Content (Contenido):* Contenidos del HTML.  +
- *Relleno (padding):* Espacio entre el contenido y el borde.  +
- *Borde (border):* Línea que encierra completamente el contenido y su relleno.  +
- *Imagen de fondo (background image):* Imagen que se muestra por detrás del contenido y el espacio de relleno.  +
- *Color de fondo (background color):* Color que se muestra por detrás del contenido y el espacio de relleno.  +
- *Margen (margin):* Separación entre la caja y el resto de cajas adyacentes. +
- *Outline (contorno):* Contorno de la caja la cual no ocupa espacio, al contrario de border. +

El Padding y el Margin son transparentes, esto provoca que el espacio ocupado por el relleno muestre un color de fondo o una imagen (en caso de estar definidos).

== Box Sizing

Se refiere al calculo del tamaño que tendra la caja, por defecto, es seleccionado el *content-box*.

*content-box:* +

- Comportamiento por defecto del CSS.
- Si se define el ancho de la caja, se ajustara a el, sin embargo, si este posee borde o relleno, se le sumara a la caja, incrementando su tamaño.

*border-box:* +

- Tamaño que se defina, tamaño que prevalece.
- Si se desea añadir un borde o relleno, se ajustara al tamaño definido, por lo tanto, el tamaño sigue intacto.
- No incrementa conforme borde o relleno.

== Flujo del documento

Es la manera en la que los elementos son desplegados en el documento.
Dependiendo del tipo de elemento, estos se colocarán de la siguiente manera con las propiedades *Display*: +

== Propiedades Display

*Elementos de Bloque (block)*

- Siempre empiezan en una nueva línea, no se sitúan uno al lado del otro. +
- Cada línea se completa con un único elemento, aún si su contenido es mínimo. +
- El flujo es de arriba hacia abajo. +

*Elementos de Línea (inline)* +

- Se colocan en línea hasta que sus anchos lo permitan. +
- Cuando completen una línea saltan a la siguiente. +
- El flujo es de izquierda a derecha. +

*Elementos de Linea de Bloque (inline-block)* +

- Mezcla de ambos.
- Se colocan de izquierda a derecha y de arriba a abajo.
- Posee margin y padding.

*Elementos que no poseen ninguno (none)* +

- No es visible.
- Su espacio puede ser ocupado por otros elementos.

*En un flujo normal del documento:* +

- De Bloque: +
El ancho será todo el disponible de su contenedor padre. +
El alto lo define su contenido. +
- De Línea: +
El ancho y el alto lo define el contenido.
- De Línea de Bloque: +
Fluyen con el texto y elementos, respetando el ancho, alto y margenes.
- De None: +
Otros elementos pueden utilizar su espacio.

== Posicionamiento de cajas 

En un flujo normal del documento, sus elementos tendrán una posición static. +
Para remover un elemento del flujo cambiaremos el valor de su posición y usaremos valores de desplazamiento para moverlo del flujo desde un punto de referencia. +

*Float* +
Se usan para desplazar cajas a la izquierda o a la derecha
Permitiendo que todo el contenido envuelva al elemento flotante. +
Esta técnica era (y aún es) usada para crear layouts de columnas usando medidas de porcentaje. +
Aunque su intención es hacer que texto flote alrededor de una imagen. +

*Relativo* + 
El punto de referencia será su posición original en el flujo. +
Su posición en el flujo queda reservada. +

*Absolute* +
El punto de referencia sera su contenedor padre o el navegador
Su posición en el flujo sera removida. +

*Fixed* +
El punto de referencia sera el navegador. +
No hay espacio reservado en el flujo del documento. +

*Sticky* +
El elemento se posiciona normal en el flujo del documento
pero al alcanzar cierta posición, cambia a fixed. +

== Cascada +
La cascada se refiere a que las declaraciones de estilo pueden estar en varios sitios y dependiendo este sitio, afectará a mas o menos elementos. +
Cuando dos o mas reglas se aplican a un mismo elemento:

- El navegador las aplica todas y prevalecerá siempre la última regla escrita.

Cuando dos o mas reglas entran en conflicto:

- Existen reglas para definir la precedencia.

*La cascada:*
Cuando se entra en "conflicto" con algun otro elemento de diseño del codigo, aqui entra la cascada en juego, la cual se establece en base a 3 factores:

- Importancia: El origen, donde esta ubicado el estilo.
- Especificidad: Es el peso del selector (que tan especifico es).
- Orden: La última regla declarada "gana" y sobre-escribe a la anterior.

=== Importancia
- User Agent: Estilos por defecto del navegador.
- De Usuario: Estilos que añade el usuario por ciertas razones.
- De Autor: Estilos que declara el autor del documento.

*Estilos por defecto (user agent styles)* +
Cuando un documento HTML carece de estilos en realidad si tiene estilos. +
Tiene los estilos por defecto aplicados por el navegador. +
No es recomentable confiar en los estilos por defecto y siempre debemos especificar nuestros estilos en nuestra hoja de estilos. +

*Estilos de usuario* +
En los navegadores, el usuario puede definir, por ejemplo el tamaño del texto, color, etc. +
Esto anula lo definido por el diseñador web, sus opciones prevalecen. +
Aunque esto no es común y la mayoría de los usuarios no lo hacen. +
Su empleo se limita a personas con problemas de vista que necesitan tamaños de fuente grande y colores vistosos y a usuarios avanzados con gran dominio de la configuracion del navegador. +
A pesar del poco uso como programadores debemos saber esto. +

*Estilos de autor*

- Archivos externos. + 
archivo.css
- Declaración interna. + 
<head><style>...</style></head>
- Declaración en línea. +
<tag style="property:value"></tag>

=== Regla !important +
La regla !important es un ganador seguro, le ganará incluso a los estilos en línea (en el html). +
Si al final de una regla le agregamos el texto !important conseguiremos que tenga prioridad sobre todas las demás. +

NOTE: El uso/abuso de important es considerado una mala práctica.

Una regla !important de usuario tendrá prioridad sobre una de autor. +

La única manera de que una regla !important no se aplique es que exista otra !important mas adelante en el CSS con igual o mayor especificidad. +

== Especificidad +
Si dos selectores se aplican a un mismo elemento, ganará el mas específico. +
Entre mas específico sea un selector, tendrá mas peso. +
Cuando la especificidad es la misma, se toma el cuenta el orden de los selectores. +
El diferente peso de los selectores es la principal razón de que alguna regla de nuestro CSS no se aplique. +
En muchos casos una regla no se aplica debido a que en algún lugar del código CSS se ha definido un selector más específico. +
El navegador asignará un valor de especificidad siguiendo un conjunto de reglas estándar de especificidad. +

NOTE: Cuanto mas específico es un selector, mas importancia tiene la regla. +
A igual especificidad, se aplica la última regla declarada.

== Como calcular la Especificidad +
Cada selector tiene su lugar en la jerarquía de especificidad.
Hay cuatro categorías que definen el nivel de especificidad de un selector. +

*Calculo del valor de especifidad:* +

- Etiqueta HTML (Inline style) = 1000 pts.
- ID = 100 pts.
- Clase, pseudoclase y atributo = 10 pts.
- Elemento y pseudoelemento = 1 pts.

*En resumen:*

- Hay cuatro categorías que definen el nivel de especificidad.
- Cada selector tiene un lugar en la jerarquía de la especificidad.
- Si dos o mas selectores se aplican a un mismo elemento, ganará el que tenga mas especificidad.
- Si dos o mas selectores tienen la misma especificidad, ganará el último que se haya declarado.
- La última regla definida sobre-escribe cualquier regla previa con la que tenga conflicto.

== Orden +
Cuando varios selectores CSS apuntan a el mismo elemento y tienen la misma especificidad se toma en cuenta el orden de en la declaración. +
Asumiendo que la especificidad es la misma, el orden (precedencia) de los selectores importa. +
Los estilos declarados "después" siempre "ganarán". +

*Se toma en cuenta lo siguiente:*

- El orden (precedencia) en el archivo CSS.
- En caso de varias hojas de estilos también se toma en cuenta el orden de las hojas.

== Tipos de selectores

- *Básicos:* Selector universal, de etiqueta, de Identifiador y de clase.
- *Relación:* Selecciona elementos basándonse en su relacion con otros elementos.
- *Pseudo Selectores:* Palabaras clave agregadas a un selector para hacerlo más específico.
- *Atributos:* Selecciona elementos basándose en sus atributos y sus valores.

=== Selectores Basicos

- *h1 de Etiqueta:* Todas las etiquetas h1
- *#id de Identificador:* El elemento que tenga asignado el identificador id.
- *.class de Clase:* Todos los elementos que tengan asiganda la clase class.

=== Selectores Relacionales

- *div p* + 
Descendiente Todos los elementos p que estén dentro de div.
- *div > p* +
Descendiente Directo, todos los elementos p que sean hijos directos de div.
- *div + p* +
Hermano Adyacente, el elemento p que sean hermano y este inmediatamente despues de div.
- *div ~ p* +
Hermano General, todos los elementos p que sean hermanos de div.

=== Pseudoselectores

Los pseudo selectores se dividen en dos grupos: *pseudo elementos y pseudo clases* y no son mas que llaves o palabras clave que se agregan a un selector. +
Estas palabras clave no se refieren en si a elementos que existen
en el documento html, sino a ubicaciones y partes de un elemento y los diferentes estados que este puede tener.

- *Pseudo elementos:* Seleccionan solamente ciertas partes de un elemento o se referieren a su ubicación en el DOM. +
*Pseudo clases:* Se refieren a los estados que puede tener un elemento. +

NOTE: *Clase y Pseudo Clase* +
En Css las clases son definidas por el usuario y su propósito es clasificar o agrupar reglas de estilo al contrario las pseudo clases son agregadas por el user agent (el navegador) de acuerdo al estado
de los elementos. +
Cada elemento puede tener diferentes estados que están en función de su naturaleza y de su interacción con el usuario. +
Estos estados no están declarados o escritos en el código html pero podemos referirnos a ellos con las pseudo clases.

*Pseudo elementos* 

- *::first-letter* La primera letra de un elemento de bloque.
- *::first-line* La primera línea de un elemento de bloque.
- *::before* La ubicación que esta antes de un elemento.
- *::after* La ubicación que esta después de un elemento.

NOTE: ::before y ::after se usan frecuentemente con la propiedad content para insertar contenido.

//decidi incluir los tipos de pseudo clases como nota para mi, usted pedia 4 ejemplos, sin embargo los deje asi para yo poder recurrir a este documento cuando tenga dudas de mi CSS o quiera utilizar alguno de estos, no le tome importancia.

*Pseudo clases dinamicas*

- *:link* Los enlaces que no se han visitado (Sólo para elementos <a>).
- *:visited* Los enlaces que ya han sido visitados (Sólo para elementos <a>).
- *:hover* Elemento cuando el usuario pasa el ratón sobre el.
- *:active* Elemento activo (solamente durante el click).
- *:focus* Elemento que tiene el focus (hasta que lo pierda).

*Pseudo clases estructurales*

- *:first-child* El primer hijo del elemento seleccionado.
- *:last-child* El último hijo del elemento seleccionado.
- *:first-of-type* El primer hijo del elemento seleccionado del mismo tipo.
- *:last-of-type* El último hijo del elemento seleccionado del mismo tipo.
- *:only-child* Si el elemento tiene un hijo único.
- *:only-of-type* Si el elemento no tiene hermanos del mismo tipo.

*Pseudo clases de interfaz*

- *:enabled* Si el elemento (de formulario) esta habilitado.
- *:disabled* Si el elemento (de formulario) esta inhabilitado.
- *:checked* Si el elemento checkbox, radio button y option esta seleccionado.
- *:valid* Los navegadores proveen validación básica de acuerdo al tipo de elemento input.


== Unidades de medida - Relativas y Absolutas
*Absolutas*

- cm centimeter
- mm milimeter
- in inches

*Relativas*

- px pixel
- % percent

Pixel y Percent son dos de las unidades mas usadas. Pixel se refiere a pixel fisico en pantalla. +
Percent se refiere al valor proporcional del contenedor padre para esa propiedad. +
Los pixeles nos porpocionan un control preciso en el diseño de layouts. +
Los porcentajes son útiles para definir tamaños de fuentes, al definir una fuente como porcentaje nuestros textos siempre serán escalables. +

[source, css]
----
.UnPix { font-size: 1px; }
.UnPorc { font-size: 1%; }
----

*Relativa a la fuente*

- em Tamano de fuente
- rem Tamano de fuente de raíz
- ex Aproximadamente la mitad del tamaño de fuente (altura de la letra x)
- ch El ancho del caracter cero


em Se refiere al tamaño de la fuente actual. +
rem Se refiere al tamaño de la fuente del elemento raíz. +
ex Se refiere aproximadamente la mitad del tamaño de la fuente actual. +
ch Se refiere al ancho del caracter cero. +

[source, css]
----
.UnEm { font-size: 1em; }
.UnRem { font-size: 1rem; }
.UnEx { font-size: 1ex; }
----

//Algunas cosas de este documento me sirven a la hora del estudio, por eso algunos textos pueden verse como "Copy/paste" creame que si los he leido, el examen me confundio un poco al pasar de Importancia a Especificidad, por la inline style, como se repite, no entiendo muy bien el orden.